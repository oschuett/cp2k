# Tested with: Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.5.274 Build 20180823
#              Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.1.217 Build 20200306
#              Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.3.304 Build 20200925
#              Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112
#              Intel MPI, MKL
# Author: Matthias Krack (matthias.krack@psi.ch, PSI, March 2021)

CC        = icc
FC        = ifort
LD        = ifort
AR        = ar -r

# Only one test input (CH4-rsLDA.inp) gives wrong results with inlining enabled
#CFLAGS    = -O2 -fno-inline -fopenmp -fp-model precise -funroll-loops -g -qopenmp-simd -traceback -xHost
CFLAGS    = -O2 -fopenmp -fp-model precise -funroll-loops -g -qopenmp-simd -traceback -xHost

LIBINT_DIR  = /opt/libint-v2.6.0-cp2k-lmax-4/install

DFLAGS    = -D__FFTW3
DFLAGS   += -D__MAX_CONTR=4
DFLAGS   += -D__MKL
DFLAGS   += -D__LIBINT

FCFLAGS   = $(CFLAGS) $(DFLAGS)
FCFLAGS  += -diag-disable=8291
FCFLAGS  += -diag-disable=8293
FCFLAGS  += -fpp
FCFLAGS  += -free
FCFLAGS  += -I$(MKLROOT)/include
FCFLAGS  += -I$(MKLROOT)/include/fftw
FCFLAGS  += -I$(LIBINT_DIR)/include

LDFLAGS   = $(FCFLAGS) -static-intel
LDFLAGS_C = -nofor-main

MKL_LIB   = $(MKLROOT)/lib/intel64

LIBS     = $(LIBINT_DIR)/lib/libint2.a
LIBS     += -Wl,--start-group
LIBS     += $(MKL_LIB)/libmkl_intel_lp64.a
LIBS     += $(MKL_LIB)/libmkl_sequential.a
LIBS     += $(MKL_LIB)/libmkl_core.a
LIBS     += -Wl,--end-group
LIBS     += -lstdc++

# Required due to memory leak that occurs if high optimisations are used
mp2_optimize_ri_basis.o: mp2_optimize_ri_basis.F
	$(FC) -c $(subst O2,O0,$(FCFLAGS)) $<
